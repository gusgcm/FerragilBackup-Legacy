# -----------------------------------------------------------------------------
# Copyright (c) 2015-2020, PyInstaller Development Team.
#
# Distributed under the terms of the GNU General Public License (version 2
# or later) with exception for distributing the bootloader.
#
# The full license is in the file COPYING.txt, distributed with this software.
#
# SPDX-License-Identifier: (GPL-2.0-or-later WITH Bootloader-exception)
# -----------------------------------------------------------------------------

import os
from inspect import getmembers, isfunction
from functools import partial
import boto

# Load credentials securely from environment variables
credentials = {
    "aws_access_key_id": os.environ.get("AWS_ACCESS_KEY_ID"),
    "aws_secret_access_key": os.environ.get("AWS_SECRET_ACCESS_KEY"),
}

# List of functions to skip
skip = {
    'connect_cloudsearchdomain',
    'connect_ec2_endpoint',
    'connect_gs',
    'connect_euca',
    'connect_ia',
    'connect_walrus',
}

# Automatically collect all connect_ functions in boto, except those in skip
connect_funcs = [
    func for name, func in getmembers(boto)
    if isfunction(func) and name.startswith('connect_') and name not in skip
]

# Add required partial functions for special cases
special_connects = [
    partial(boto.connect_ec2_endpoint, 'https://ec2.amazonaws.com', **credentials),
    partial(boto.connect_gs, gs_access_key_id='', gs_secret_access_key=''),
    partial(boto.connect_euca, host=None, **credentials),
    partial(boto.connect_ia, ia_access_key_id='', ia_secret_access_key=''),
    partial(boto.connect_walrus, host='s3.amazonaws.com', **credentials),
]

connect_funcs.extend(special_connects)

# Try to connect using each function
for connect_func in connect_funcs:
    try:
        if isfunction(connect_func):
            connect_func(**credentials)
        else:  # partial or other callable
            connect_func()
    except Exception as e:
        print(f"Connection failed for {connect_func}: {e}")
